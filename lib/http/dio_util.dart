import 'package:ComicInn/common/common.dart';
import "package:dio/dio.dart";
import 'package:ComicInn/models/index.dart';

Future lqrHttp(
  url,
  method, {
  data,
  bool cache: false,
  bool upload: false,
  bool dialog: false,
  bool debug: false,
  bool loading: false,
  Map<String, dynamic> headers,
  String contentType: "application/x-www-form-urlencoded",
}) async {
  try {
    Response response;
    Dio dio = Dio();
    dio.options.connectTimeout = 1000 * 10;
    dio.options.receiveTimeout = 1000 * 10;
    dio.options.method = method;
    dio.options.baseUrl = SpUtil.getString('apiUrl', defValue: LqrConfig.envApi[LqrConfig.environment]['url']);
    // headers
    dio.options.headers = {
      'Authorization': SpUtil.getString('token'),
    };
    dio.options.headers.addAll(headers ?? {});

    dio.options.contentType = Headers.formUrlEncodedContentType;

    dio.interceptors.add(InterceptorsWrapper(
      onRequest: (RequestOptions options) async {
        String responseData = SpUtil.getString(url);
        if (cache && responseData != null) {
          print("+++||$url缓存数据");
          return dio.resolve(json.decode(responseData));
        }
        if (loading) Lqr.ui.loading();
        return options;
      },
    ));

    response = await dio.request(url, data: data == null ? {} : data);
    Autogenerated resData = Autogenerated.fromJson(response.data);
    if (loading) Navigator.of(Store.scaffoldCtx, rootNavigator: true).pop();
    if (dialog) {
      switch (resData.code) {
        case "000000":
          Lqr.ui.toast(lqrApiCode[url] ?? resData.msg);
          break;
        default:
          Lqr.ui.toast(lqrApiCode[resData.code] ?? resData.msg);
      }
    }

    String debugString = """\n===============================+++
    【请求地址】:${response.request.uri}
    【接口地址】:$url
    【请求数据】:${response.request.data}
    【请求头部】:${response.request.headers}
    【园区id】:${response.request.headers['zhyqId']}
    【门户id】:${response.request.headers['LocationId']}
    【请求方式】:${response.request.contentType}
    【状态码】:${response.statusCode}
    【状态码】:${resData.code}
    【返回信息】: ${resData.msg}
    【返回数据】: ${resData.data}
===============================---\n""";
    print(debugString);
    Store.value<ConfigProvide>(Store.storeCtx).debugList.insert(0, debugString);

    if (resData.code == "000000") {
      SpUtil.putObject(url, resData);
      return resData;
    } else {
      throw resData.msg;
    }
  } on DioError catch (e) {
    if (loading) Navigator.of(Lqr.ui.scaffoldCtx, rootNavigator: true).pop();
    switch (e.type) {
      case DioErrorType.CONNECT_TIMEOUT:
        throw '连接超时，请检查网络';
        break;
      case DioErrorType.RECEIVE_TIMEOUT:
        throw '请求返回超时';
        break;
      case DioErrorType.RESPONSE:
        switch (e.response.statusCode) {
          case 401:
            throw '登陆失效，请重新登录';
            break;
          default:
            throw '系统异常，请联系客服';
        }
        break;
      default:
    }
  }
}
